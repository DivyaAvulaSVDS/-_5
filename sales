import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

dataset_path = "/content/drive/MyDrive/Advertising.csv"
df = pd.read_csv(dataset_path,index_col=0)
df.head()

print(df.dtypes)

df.isnull()

df.notnull()

df.info()

df.isna()

df.isna().sum()

Y=df['Sales']
X=df.drop(columns={'Sales'})

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
linear_reg_model = LinearRegression()
linear_reg_model.fit(X_train, y_train)
y_pred = linear_reg_model.predict(X_test)

import numpy as np

r2 = r2_score(y_test, y_pred)
print(f"R-squared Score: {r2}")

#2

import numpy as np
import pandas as pd
dataset_path = "/content/drive/MyDrive/Advertising.csv"
df = pd.read_csv(dataset_path, index_col=0)

print(df.isna().sum())

Y = df['Sales']
X = df.drop(columns={'Sales'})

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
linear_reg_model = LinearRegression()
linear_reg_model.fit(X_train, y_train)
y_pred = linear_reg_model.predict(X_test)

r2 = r2_score(y_test, y_pred)
print(f"R-squared Score: {r2}")

#3

import numpy as np
import pandas as pd
data_path = "/content/drive/MyDrive/Advertising.csv"
data = pd.read_csv(data_path, index_col=0)

print(data.isna().sum())

y = data['Sales']
X = data.drop(columns={'Sales'})

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
linear_reg_model = LinearRegression()
linear_reg_model.fit(X_train, y_train)
y_pred = linear_reg_model.predict(X_test)

r2 = r2_score(y_test, y_pred)
print(f"R-squared Score: {r2}")

